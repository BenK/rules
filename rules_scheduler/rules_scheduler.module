<?php
// $Id$

/**
 * @file
 * Rules scheduler module.
 */

/**
 * Implements hook_cron().
 */
function rules_scheduler_cron() {
  // Do max 30 rule sets
  //TODO: make this configureable
  $result = db_query_range("SELECT * FROM {rules_scheduler} WHERE date < '%s'", gmdate('Y-m-d H:i:s'), 0, 30);

  while ($row = db_fetch_object($result)) {
    rules_include('rules');
    $vars = rules_unpack_variables(unserialize($row->arguments));

    if ($vars) {
      // Invoke the rule set
      $args = $vars['data'];
      array_unshift($args, $row->set_name);
      call_user_func_array('rules_invoke_rule_set', $args);
    }
    db_query("DELETE FROM {rules_scheduler} WHERE tid = %d", $row->tid);
  }
}

/**
 * Load a task by a given task ID.
 */
function rules_scheduler_task_load($tid) {
  $result = db_query("SELECT * FROM {rules_scheduler} WHERE tid = %d", $tid);
  $task = db_fetch_array($result);
  return $task;
}

/**
 * Schedule a task to be executed later on.
 *
 * @param $name
 *   The machine readyble name of the to be scheduled component.
 * @param $plugin
 *   The plugin of the to be scheduled component.
 * @param $date
 *   Timestamp when the component should be executed.
 * @param $state RulesState
 *   An rules evaluation state to use for scheduling.
 * @param $task_id
 *   User provided string to identify the task per scheduled configuration.
 */
function rules_scheduler_schedule_task($name, $plugin, $date, RulesState $state, $task_id = '') {
  if (!empty($task_id)) {
    // If there is a task with the same identifier and component, we replace it.
    db_delete('rules_scheduler')
      ->condition('name', $name)
      ->condition('plugin', $plugin)
      ->condition('identifier', $task_id)
      ->execute();
  }
  $task = array(
    'date' => $date,
    'name' => $name,
    'plugin' => $plugin,
    'state' => serialize($state),
    'identifier' => $task_id,
  );
  drupal_write_record('rules_scheduler', $task);
}
